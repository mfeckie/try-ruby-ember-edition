/* Generated by Opal 0.6.0 */
(function($opal) {
    var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

    $opal.add_stubs(['$new', '$compile', '$eval_code', '$log_error', '$print_to_output', '$<<']);
    return (function($base, $super) {
        function $RubyOpalCompiler(){};
        var self = $RubyOpalCompiler = $klass($base, $super, 'RubyOpalCompiler', $RubyOpalCompiler);

        var def = self._proto, $scope = self._scope;

        def.output = nil;
        $opal.defs(self, '$instance', function() {
            var $a, self = this;
            if (self.instance == null) self.instance = nil;

            return ((($a = self.instance) !== false && $a !== nil) ? $a : self.instance = self.$new());
        });

        def.$initialize = function() {
            var self = this;

            self.output = [];
            return self.compiled_lines = [];
        };

        def.$run_code = function(input_code) {
            var $a, self = this, code = nil, err = nil;

            self.output = [];
            try {
                code = (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$compile(input_code);
                self.$eval_code(code);
                return self.output;
            } catch ($err) {if (true) {err = $err;
                return self.$log_error(err)
            }else { throw $err; }
            };
        };

        def.$compile = function(str) {
            var $a, self = this;

            return (($a = $scope.Opal) == null ? $opal.cm('Opal') : $a).$compile(str);
        };

        def.$eval_code = function(js_code) {
            var self = this;

            return eval(js_code);
        };

        def.$log_error = function(err) {
            var self = this;

            return self.$print_to_output("" + (err) + "\n" + (err.stack));
        };

        return (def.$print_to_output = function(str) {
            var self = this;

            return self.output['$<<'](str);
        }, nil);
    })(self, null)
})(Opal);

